// üîí PROTECTED Logic Layer - ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏° Core Logic
// Service Worker ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Extension ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Logic ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á

import { AutomationEngine } from './automation-engine.js';

// --- State Management ---
let collectedData = []; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤

// --- CSV Helper Functions ---

/**
 * @name arrayToCsv
 * @description ‡πÅ‡∏õ‡∏•‡∏á Array ‡∏Ç‡∏≠‡∏á Object ‡πÄ‡∏õ‡πá‡∏ô CSV String ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö comma ‡πÅ‡∏•‡∏∞ quote
 * @param {Array<object>} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á
 * @returns {string} - CSV String
 */
function arrayToCsv(data) {
  if (data.length === 0) return "";
  const headers = Object.keys(data[0]);
  const csvRows = [
    headers.join(','), // Header row
    ...data.map(row =>
      headers.map(fieldName => {
        const value = row[fieldName] === null ? '' : row[fieldName];
        const stringValue = String(value);
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ comma, double quote, ‡∏´‡∏£‡∏∑‡∏≠ newline ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ double quote
        if (stringValue.includes(',') || stringValue.includes('"') || stringValue.includes('\n')) {
          // ‡πÅ‡∏•‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ double quote ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô double-double-quote
          return `"${stringValue.replace(/"/g, '""')}"`;
        }
        return stringValue;
      }).join(',')
    )
  ];
  return csvRows.join('\r\n');
}

/**
 * @name downloadCsv
 * @description ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV
 * @param {string} csvContent - ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ CSV ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
 */
function downloadCsv(csvContent) {
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° BOM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UTF-8 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Excel ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  const blob = new Blob(['\uFEFF' + csvContent], { type: 'text/csv;charset=utf-8;' });
  const url = URL.createObjectURL(blob);
  chrome.downloads.download({
    url: url,
    filename: `shopee-brand-offer-data-${Date.now()}.csv`,
    saveAs: true,
  }, (downloadId) => {
    URL.revokeObjectURL(url);
    if (chrome.runtime.lastError) {
      console.error("Download failed:", chrome.runtime.lastError.message);
    }
  });
}

// --- Engine Integration ---

const statusUpdater = (progress) => {
  chrome.runtime.sendMessage({ type: 'AUTOMATION_PROGRESS_UPDATE', payload: progress })
    .catch(err => { if (err.message && !err.message.includes("Could not establish connection")) console.error(err); });
};

const dataHandler = (pageData) => {
    console.log(`Background: Received ${pageData.length} items.`);
    collectedData.push(...pageData);
};

const engine = new AutomationEngine(statusUpdater, dataHandler);

// --- Lifecycle Hooks ---
chrome.runtime.onInstalled.addListener(() => {
  console.log("Shopee Brand Offer Extractor installed/updated.");
});

// --- Message Listener ---

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.type === 'GET_ACTIVE_TAB_URL') {
    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
        if (tabs && tabs.length > 0) sendResponse({ url: tabs[0].url });
        else sendResponse({ url: null, error: chrome.runtime.lastError?.message });
    });
    return true;
  }

  else if (message.type === 'START_AUTOMATION') {
    collectedData = []; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
        if (tabs && tabs.length > 0) {
            engine.start(message.payload, tabs[0].id);
            sendResponse({ status: 'ok', message: 'Automation process started.' });
        } else {
            sendResponse({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Tab ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' });
        }
    });
    return true;
  }

  else if (message.type === 'STOP_AUTOMATION') {
    engine.stop();
    sendResponse({ status: 'ok', message: 'Stop signal sent.' });
  }

  else if (message.type === 'GET_AUTOMATION_STATUS') {
    const status = {
        status: engine.isRunning ? 'running' : 'idle',
        progress: engine.isRunning ? Math.round(((engine.currentPage - 1) / (engine.config.pages || 1)) * 100) : (engine.isStopping ? 0 : 100),
        message: engine.isRunning ? `Page ${engine.currentPage} of ${engine.config.pages || 'N/A'}` : 'Ready'
    };
    sendResponse(status);
  }

  else if (message.type === 'DOWNLOAD_CSV') {
    if (collectedData.length === 0) {
        sendResponse({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î' });
        return true; // Keep channel open
    }
    try {
        const csv = arrayToCsv(collectedData);
        downloadCsv(csv);
        sendResponse({ status: 'ok' });
    } catch (error) {
        sendResponse({ status: 'error', message: error.message });
    }
    return true; // Keep channel open
  }
});
