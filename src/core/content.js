// üîí PROTECTED Logic Layer - ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏° Core Logic
// Content script ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏â‡∏µ‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Shopee Affiliate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö DOM

console.log("Shopee Extractor: Content Script Loaded and ready.");

/**
 * @name findAndClick
 * @description ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å Element ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
 * @param {Array<string>} selectors - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ selectors ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ
 * @param {number} timeout - ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠ (ms)
 * @returns {Promise<object>}
 */
function findAndClick(selectors, timeout = 5000) {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();
    const interval = setInterval(() => {
      if (Date.now() - startTime > timeout) {
        clearInterval(interval);
        reject(new Error(`Action timed out. Could not find element with selectors: ${selectors.join(', ')}`));
        return;
      }
      for (const selector of selectors) {
        // querySelectorAll is used to support non-standard :has-text pseudo-class if needed,
        // though direct support is limited. A better implementation might use XPath.
        const elements = document.querySelectorAll(selector);
        // Find the first visible element
        const visibleElement = Array.from(elements).find(el => el.offsetParent !== null);

        if (visibleElement && !visibleElement.disabled) {
          clearInterval(interval);
          visibleElement.click();
          resolve({ success: true, foundSelector: selector });
          return;
        }
      }
    }, 300); // Retry every 300ms
  });
}

/**
 * @name messageListener
 * @description Listener ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å background script (AutomationEngine)
 * ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
 */
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å extension ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  if (sender.id !== chrome.runtime.id) {
    console.warn("Ignoring message from unknown sender:", sender.id);
    return;
  }

  console.log("Content Script Received Action:", request.action);

  // Mapping of actions to selector arrays
  const selectorMap = {
    SELECT_ALL: [
      'th input[type="checkbox"]',
      'button:contains("Select All")', // Using :contains for broader text matching
      'button:contains("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")',
    ],
    GET_LINKS: [
      'button:contains("Get Link")',
      'button:contains("‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå")',
    ],
    NEXT_PAGE: [
      'button[aria-label="Go to next page"]',
      'button[aria-label="‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"]',
      'button.shopee-icon-button--right',
    ]
  };

  const selectors = selectorMap[request.action];

  if (selectors) {
    findAndClick(selectors)
      .then(result => sendResponse({ status: 'ok', data: result }))
      .catch(error => sendResponse({ status: 'error', message: error.message }));
    return true; // Keep message channel open for async response
  } else {
    sendResponse({ status: 'error', message: `Unknown action: ${request.action}` });
  }

  return true;
});
