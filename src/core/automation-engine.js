// üîí PROTECTED Logic Layer - ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏° Core Logic
// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ö‡∏£‡∏£‡∏à‡∏∏ Logic ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Extension

/**
 * @class AutomationEngine
 * @description ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Workflow ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Shopee Affiliate ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô, ‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤, ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á UI
 */
export class AutomationEngine {
  /**
   * @constructor
   * @param {function(object): void} statusUpdater - Callback function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
   */
  constructor(statusUpdater) {
    this.statusUpdater = statusUpdater;
    this.isRunning = false;
    this.isStopping = false;
    this.config = {};
    this.currentPage = 1;
    this.tabId = null; // Tab ID ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
  }

  /**
   * @name start
   * @description ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
   * @param {object} config - ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å UI
   * @param {number} tabId - ID ‡∏Ç‡∏≠‡∏á Tab ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ Script ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
   */
  async start(config, tabId) {
    if (this.isRunning) {
      console.warn("Automation is already running.");
      return;
    }

    // --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ---
    this.config = config;
    this.tabId = tabId;
    this.isRunning = true;
    this.isStopping = false;
    this.currentPage = 1;

    console.log("Automation Engine: Starting with config:", config);
    this._sendStatus({ percent: 0, message: `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...`, state: 'running' });

    // --- ‡πÄ‡∏£‡∏¥‡πà‡∏° Loop ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å ---
    await this._runLoop();

    // --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ---
    if (!this.isStopping) {
        this._sendStatus({ percent: 100, message: "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!", state: 'finished' });
    } else {
        this._sendStatus({ percent: 0, message: "‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", state: 'idle' });
    }
    this.isRunning = false;
    this.isStopping = false;
  }

  /**
   * @name stop
   * @description ‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Loop
   */
  stop() {
    if (this.isRunning) {
      this.isStopping = true;
      console.log("Automation Engine: Stop signal received.");
    }
  }

  /**
   * @private
   * @name _runLoop
   * @description Loop ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡∏ß‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
   */
  async _runLoop() {
    while (this.currentPage <= this.config.pages) {
      if (this.isStopping) {
        console.log("Automation Engine: Loop stopped.");
        break;
      }

      const progress = Math.round(((this.currentPage - 1) / this.config.pages) * 100);
      this._sendStatus({ percent: progress, message: `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤ ${this.currentPage}/${this.config.pages}...` });

      try {
        await this.processPage();

        if (this.currentPage < this.config.pages) {
          await this._goToNextPage();
          await new Promise(resolve => setTimeout(resolve, this.config.delay || 1000));
        }

        this.currentPage++;
      } catch (error) {
        console.error(`Error on page ${this.currentPage}:`, error);
        this._sendStatus({ percent: 100, message: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`, state: 'idle' });
        this.isStopping = true;
        break;
      }
    }
  }

  /**
   * @name processPage
   * @description ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   */
  async processPage() {
    console.log(`Processing page ${this.currentPage}`);
    await this._selectAllProducts();
    await new Promise(resolve => setTimeout(resolve, 500)); // ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    await this._getLinks();
    // TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö event ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≠‡πÉ‡∏´‡πâ dialog ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏¥‡∏á‡∏Å‡πå
    await new Promise(resolve => setTimeout(resolve, 1000)); // ‡∏£‡∏≠ dialog ‡πÅ‡∏™‡∏î‡∏á
  }

  /**
   * @private
   * @name _injectFunction
   * @description Helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏â‡∏µ‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô Content Script ‡∏Ç‡∏≠‡∏á Tab ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
   * @param {function} func - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô‡πÉ‡∏ô Tab
   * @param {Array} args - Arguments ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
   */
  async _injectFunction(func, args = []) {
    if (!this.tabId) throw new Error("Tab ID is not set.");

    const results = await chrome.scripting.executeScript({
      target: { tabId: this.tabId },
      func: func,
      args: args,
    });

    if (chrome.runtime.lastError) {
        throw new Error(`Script injection failed: ${chrome.runtime.lastError.message}`);
    }
    if (results[0].result && results[0].result.error) {
        throw new Error(results[0].result.error);
    }
    return results[0].result;
  }

  /**
   * @private
   * @name _findAndClick
   * @description ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏â‡∏µ‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å Element
   * @param {Array<string>} selectors - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ selectors ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ
   * @param {number} timeout - ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠ (ms)
   */
  static _findAndClick(selectors, timeout = 5000) {
    return new Promise((resolve, reject) => {
        const startTime = Date.now();
        const interval = setInterval(() => {
            if (Date.now() - startTime > timeout) {
                clearInterval(interval);
                reject({ error: `‡πÑ‡∏°‡πà‡∏û‡∏ö Element ‡∏à‡∏≤‡∏Å: ${selectors.join(', ')} ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ${timeout}ms` });
                return;
            }

            for (const selector of selectors) {
                // ‡πÉ‡∏ä‡πâ querySelectorAll ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö selector ‡πÅ‡∏ö‡∏ö text
                const elements = document.querySelectorAll(selector);
                const element = Array.from(elements).find(el => el.offsetParent !== null); // ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ

                if (element && !element.disabled) {
                    clearInterval(interval);
                    element.click();
                    resolve({ success: true, foundSelector: selector });
                    return;
                }
            }
        }, 300); // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ó‡∏∏‡∏Å 300ms
    });
  }

  /**
   * @private
   * @name _selectAllProducts
   * @description ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤
   */
  async _selectAllProducts() {
    const selectors = [
        'th input[type="checkbox"]', // Selector ‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "select all" ‡πÉ‡∏ô table header
        'button:has-text("Select All")',
        'button:has-text("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")',
    ];
    console.log("Attempting to select all products...");
    await this._injectFunction(AutomationEngine._findAndClick, [selectors]);
    console.log("Successfully selected all products.");
  }

  /**
   * @private
   * @name _getLinks
   * @description ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "Get Links"
   */
  async _getLinks() {
    const selectors = [
        'button:has-text("Get Link")',
        'button:has-text("‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå")',
    ];
    console.log("Attempting to get links...");
    await this._injectFunction(AutomationEngine._findAndClick, [selectors]);
    console.log("Successfully clicked get links.");
  }

  /**
   * @private
   * @name _goToNextPage
   * @description ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
   */
  async _goToNextPage() {
    const selectors = [
        'button[aria-label="Go to next page"]',
        'button[aria-label="‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"]',
        'button.shopee-icon-button--right' // Fallback for Shopee's typical next button icon
    ];
    console.log("Going to next page...");
    await this._injectFunction(AutomationEngine._findAndClick, [selectors]);
    console.log("Successfully navigated to next page.");
  }

  /**
   * @private
   * @name _sendStatus
   * @description ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ background script ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ UI
   * @param {object} status - ‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ { percent, message, state? }
   */
  _sendStatus(status) {
    if (this.statusUpdater) {
      this.statusUpdater(status);
    }
  }
}
