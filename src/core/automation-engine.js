// üîí PROTECTED Logic Layer - ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏° Core Logic
// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ö‡∏£‡∏£‡∏à‡∏∏ Logic ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Extension

/**
 * @class AutomationEngine
 * @description ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Workflow ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Shopee Affiliate ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Content Script ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
 */
export class AutomationEngine {
  /**
   * @constructor
   * @param {function(object): void} statusUpdater - Callback function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
   */
  constructor(statusUpdater) {
    this.statusUpdater = statusUpdater;
    this.isRunning = false;
    this.isStopping = false;
    this.config = {};
    this.currentPage = 1;
    this.tabId = null; // Tab ID ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
  }

  /**
   * @name start
   * @description ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
   * @param {object} config - ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å UI
   * @param {number} tabId - ID ‡∏Ç‡∏≠‡∏á Tab ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ Script ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
   */
  async start(config, tabId) {
    if (this.isRunning) {
      console.warn("Automation is already running.");
      return;
    }

    this.config = config;
    this.tabId = tabId;
    this.isRunning = true;
    this.isStopping = false;
    this.currentPage = 1;

    console.log("Automation Engine: Starting with config:", config);
    this._sendStatus({ percent: 0, message: `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...`, state: 'running' });

    await this._runLoop();

    if (!this.isStopping) {
      this._sendStatus({ percent: 100, message: "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!", state: 'finished' });
    } else {
      this._sendStatus({ percent: 0, message: "‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", state: 'idle' });
    }
    this.isRunning = false;
    this.isStopping = false;
  }

  /**
   * @name stop
   * @description ‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Loop
   */
  stop() {
    if (this.isRunning) {
      this.isStopping = true;
      console.log("Automation Engine: Stop signal received.");
    }
  }

  /**
   * @private
   * @name _runLoop
   * @description Loop ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡∏ß‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
   */
  async _runLoop() {
    while (this.currentPage <= this.config.pages) {
      if (this.isStopping) {
        console.log("Automation Engine: Loop stopped.");
        break;
      }

      const progress = Math.round(((this.currentPage - 1) / this.config.pages) * 100);
      this._sendStatus({ percent: progress, message: `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤ ${this.currentPage}/${this.config.pages}...` });

      try {
        await this.processPage();
        if (this.currentPage < this.config.pages) {
          await this._goToNextPage();
          await new Promise(resolve => setTimeout(resolve, this.config.delay || 1000));
        }
        this.currentPage++;
      } catch (error) {
        console.error(`Error on page ${this.currentPage}:`, error);
        this._sendStatus({ percent: 100, message: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`, state: 'idle' });
        this.isStopping = true;
        break;
      }
    }
  }

  /**
   * @name processPage
   * @description ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   */
  async processPage() {
    console.log(`Processing page ${this.currentPage}`);
    await this._selectAllProducts();
    await new Promise(resolve => setTimeout(resolve, 500));
    await this._getLinks();
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  /**
   * @private
   * @name _performActionInContentScript
   * @description ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Content Script ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
   * @param {string} action - ‡∏ä‡∏∑‡πà‡∏≠ Action ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ Content Script ‡∏ó‡∏≥
   * @returns {Promise<object>}
   */
  async _performActionInContentScript(action) {
    if (!this.tabId) throw new Error("Tab ID is not set.");

    console.log(`Engine: Sending action '${action}' to content script.`);
    const response = await chrome.tabs.sendMessage(this.tabId, { action });

    if (chrome.runtime.lastError) {
      throw new Error(`Cannot communicate with content script: ${chrome.runtime.lastError.message}`);
    }
    if (response.status === 'error') {
      throw new Error(`Action '${action}' failed in content script: ${response.message}`);
    }

    console.log(`Engine: Action '${action}' successful.`);
    return response.data;
  }

  /**
   * @private
   * @description ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á 'SELECT_ALL' ‡πÑ‡∏õ‡∏¢‡∏±‡∏á content script
   */
  async _selectAllProducts() {
    await this._performActionInContentScript('SELECT_ALL');
  }

  /**
   * @private
   * @description ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á 'GET_LINKS' ‡πÑ‡∏õ‡∏¢‡∏±‡∏á content script
   */
  async _getLinks() {
    await this._performActionInContentScript('GET_LINKS');
  }

  /**
   * @private
   * @description ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á 'NEXT_PAGE' ‡πÑ‡∏õ‡∏¢‡∏±‡∏á content script
   */
  async _goToNextPage() {
    await this._performActionInContentScript('NEXT_PAGE');
  }

  /**
   * @private
   * @name _sendStatus
   * @description ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ background script ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ UI
   */
  _sendStatus(status) {
    if (this.statusUpdater) {
      this.statusUpdater(status);
    }
  }
}
